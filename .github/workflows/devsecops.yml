name: DevSecOps workflow for the lab

run-name: DevSecOps lab workflow starded by ${{github.actor}}

on:
  workflow_dispatch:
  push:
    branches:
      - master


jobs:

  build-and-test-dvwa:
    needs: [php-sca-audit, php-sca-snyk, semgrep, secret-scan]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: start the app with docker compose (compose has biuld in it so no need builbing b4)
        run: |
          docker compose up -d
          sleep 15

      - name: accessebility check
        run: curl -I http://127.0.0.1:4280/login.php | grep "200 OK"
      
      - name: creating tars to save  all the images involved
        run: |
          docker save ghcr.io/digininja/dvwa:latest -o dvwa-image.tar
          docker save mariadb:10 -o mariadb-image.tar

      - name: Upload DVWA image
        uses: actions/upload-artifact@v4
        with:
          name: dvwa-image
          path: dvwa-image.tar

      - name: Upload mariadb image
        uses: actions/upload-artifact@v4
        with:
          name: mariadb-image
          path: mariadb-image.tar

      - name: take down after tests
        if: always()
        run: docker compose down

  php-sca-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          tools: composer:v3

      - name: Install PHP dependencies
        run: composer install
        working-directory: vulnerabilities/api

      - name: Run Composer audit
        run: composer audit
        working-directory: vulnerabilities/api


  php-sca-snyk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4


      - name: Setting up PHP
        uses: shivammathur/setup-php@v2
        with: 
          php-version: 8.3
          tools: composer:v3
        
      - name: Install PHP dependencies 
        run: composer install
        working-directory: vulnerabilities/api

      - name: Istall snyk
        run: npm install -g snyk
      
      - name: Snyk auth
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk for sca 
        run: snyk test --file=composer.lock --package-manager=composer
        working-directory: vulnerabilities/api

  semgrep:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep

    if: (github.actor != 'dependabot[bot]')

    steps:
      - uses: actions/checkout@v4
      - run: semgrep ci
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  secret-scan:
    name: gitleaks secret scan
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: gitleaks/gitleaks-action@v2
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           with:
           args: |
            --redact # keys stay masked in the report
            --exit-code 0 # pipeline will not fail
            --verbose # more info (maybe delete that) 
        continue-on-error: true
  
  owasp-scan:
    needs: [build-and-test-dvwa]
    runs-on: ubuntu-latest

    services: 
      docker: 
        image: docker:dind
        ports:
          - 2375:2375
        options: 
          --privileged
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: install docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          docker version

      - name: get dvwa image from artifact
        uses: actions/download-artifact@v4
        with:
          name: dvwa-image
  
      - name: get mariadb image from artifact
        uses: actions/download-artifact@v4
        with:
          name: mariadb-image

      - name: Load retrived images into docker
        run: |
          docker load -i dvwa-image.tar
          docker load -i mariadb-image.tar
      
      - name: Start containers
        run: |
          docker compose up -d
          sleep 15

      - name: Perform OWASP baseline scan
        run: |
          docker run --rm \
            -v $(pwd)/zap-out:/zap/wrk/:rw \
            --network host \
            zaproxy/zap-stable zap-baseline.py \
            -t http://127.0.0.1:4280/login.php \
            -r zap-report.html

      - name: upload scan results as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: owasp_report
          path: zap-out/zap-report.html